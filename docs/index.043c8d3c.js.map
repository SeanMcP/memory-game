{"mappings":"AAAA,SAASA,EAAQC,GACf,IAAIC,EAAM,IAAID,GACd,IAAK,IAAIE,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,KACzCD,EAAIC,GAAID,EAAIG,IAAM,CAACH,EAAIG,GAAIH,EAAIC,G,CAElC,OAAOD,C,CAGT,MAAMO,EAAS,CACb,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGK,SAASC,EAAaC,EAAQ,IACnC,MAAMC,EAAOZ,EAAQS,GAAQI,MAAM,EAAGF,EAAQ,GAC9C,OAAOX,EAAQ,IAAIY,KAASA,G,CCR9B,MAAME,EAASC,SAASC,eAAe,QACjCC,EAhBN,WACE,MACMC,EADM,IAAIC,gBAAgBC,SAASC,QACRC,IAAI,SAC/BX,EAAQY,SAASL,GAKvB,OAAIP,GAASA,EAAQ,GAAM,GAAKA,GAAS,GAAKA,GAAS,GAC9CA,EAEA,E,CAKOa,GAKlB,SAASC,WACAX,EAAOY,QAAQf,aACfG,EAAOY,QAAQC,YACfb,EAAOY,QAAQE,MACtB,MAAMC,EAASnB,EAAaO,GAC5B,IAAIa,EAAY,GAChBD,EAAOE,SAAQ,CAACC,EAAO7B,KACrB2B,GAAa,sCAXA,6BAW+C3B,OAAO6B,YAAgB,IAErFlB,EAAOgB,UAAYA,C,CAXrBhB,EAAOmB,MAAMC,YAAY,YAAa5B,KAAK6B,KAAK7B,KAAK8B,KAAKnB,KAc1DQ,IAEAX,EAAOuB,iBAAiB,SAAUC,IAChC,MAAMC,OAAEA,GAAWD,EACnB,GAA6B,WAAzBxB,EAAOY,QAAQE,OAAsBW,EAAOb,QAAQE,MACtD,OAAOU,EAAME,iBAEf,GAA4B,SAAxBD,EAAOb,QAAQe,KAEjB,GADAF,EAAOb,QAAQE,MAAQ,SACnBd,EAAOY,QAAQC,KAAM,CACvB,GAAIY,EAAOG,cAAgB5B,EAAOY,QAAQC,KAAM,CAC9CZ,SAAS4B,iBAAiB,yBAAyBZ,SAASa,IAC1DA,EAAKlB,QAAQE,MAAQ,MAAM,IAE7B,MAAMiB,EAAQtB,SAAST,EAAOY,QAAQf,OAAS,GAAK,EAEpD,GADAG,EAAOY,QAAQf,MAAQkC,EACnBA,IAAU5B,EAAY,GACpB6B,QAAQ,mCACV,OAAOrB,G,MAIXX,EAAOY,QAAQE,MAAQ,SACvBmB,YAAW,KACThC,SAAS4B,iBAAiB,yBAAyBZ,SAASa,WACnDA,EAAKlB,QAAQE,KAAK,IAE3Bd,EAAOY,QAAQE,MAAQ,OAAO,GAC7B,YAEEd,EAAOY,QAAQC,I,MAEtBb,EAAOY,QAAQC,KAAOY,EAAOG,W,IAKnCM,OAAOX,iBAAiB,YAAaC,IACnC,GAtDe,6BAsDFzB,MAAM,EAAGI,GAAWgC,SAASX,EAAMY,KAAM,CACpDZ,EAAME,iBACN,MAAMW,EAAOpC,SAASqC,cAAc,cAAcd,EAAMY,SACxDC,GAAQA,EAAKE,O","sources":["src/shuffle.ts","src/main.ts"],"sourcesContent":["function shuffle(array: any[]) {\n  let arr = [...array];\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n}\n\nconst emojis = [\n  \"🐮\",\n  \"🐷\",\n  \"🐶\",\n  \"🐱\",\n  \"🦁\",\n  \"🐻\",\n  \"🐯\",\n  \"🐼\",\n  \"🐵\",\n  \"🐸\",\n  \"🐹\",\n];\n\nexport function selectEmojis(count = 16) {\n  const list = shuffle(emojis).slice(0, count / 2);\n  return shuffle([...list, ...list]);\n}\n","import { selectEmojis } from \"./shuffle\";\n\nfunction getCardCount() {\n  const usp = new URLSearchParams(location.search);\n  const param: null | string = usp.get(\"count\");\n  const count = parseInt(param);\n\n  /**\n   * Count is not NaN and is even\n   */\n  if (count && count % 2 === 0 && count >= 2 && count <= 16) {\n    return count;\n  } else {\n    return 16;\n  }\n}\n\nconst gameEl = document.getElementById(\"game\");\nconst cardCount = getCardCount();\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\ngameEl.style.setProperty(\"--columns\", Math.ceil(Math.sqrt(cardCount)));\n\nfunction round() {\n  delete gameEl.dataset.count;\n  delete gameEl.dataset.last;\n  delete gameEl.dataset.state;\n  const emojis = selectEmojis(cardCount);\n  let innerHTML = \"\";\n  emojis.forEach((emoji, i) => {\n    innerHTML += `<button data-type=\"card\" data-key=\"${alphabet[i]}\">${emoji}</button>`;\n  });\n  gameEl.innerHTML = innerHTML;\n}\n\nround();\n\ngameEl.addEventListener(\"click\", (event) => {\n  const { target } = event;\n  if (gameEl.dataset.state === \"frozen\" || target.dataset.state) {\n    return event.preventDefault();\n  }\n  if (target.dataset.type === \"card\") {\n    target.dataset.state = \"active\";\n    if (gameEl.dataset.last) {\n      if (target.textContent === gameEl.dataset.last) {\n        document.querySelectorAll(\"[data-state='active']\").forEach((node) => {\n          node.dataset.state = \"done\";\n        });\n        const score = parseInt(gameEl.dataset.count) + 1 || 1;\n        gameEl.dataset.count = score;\n        if (score === cardCount / 2) {\n          if (confirm(\"💪 Nice practicing! Play again?\")) {\n            return round();\n          }\n        }\n      } else {\n        gameEl.dataset.state = \"frozen\";\n        setTimeout(() => {\n          document.querySelectorAll(\"[data-state='active']\").forEach((node) => {\n            delete node.dataset.state;\n          });\n          gameEl.dataset.state = \"ready\";\n        }, 2000);\n      }\n      delete gameEl.dataset.last;\n    } else {\n      gameEl.dataset.last = target.textContent;\n    }\n  }\n});\n\nwindow.addEventListener(\"keypress\", (event) => {\n  if (alphabet.slice(0, cardCount).includes(event.key)) {\n    event.preventDefault();\n    const card = document.querySelector(`[data-key=\"${event.key}\"]`);\n    card && card.click();\n  }\n});\n"],"names":["$24c956025b5c50f8$var$shuffle","array","arr","i","length","j","Math","floor","random","$24c956025b5c50f8$var$emojis","$24c956025b5c50f8$export$61290d433ab99c5d","count","list","slice","$ad2bcec7a0192558$var$gameEl","document","getElementById","$ad2bcec7a0192558$var$cardCount","param","URLSearchParams","location","search","get","parseInt","$ad2bcec7a0192558$var$getCardCount","$ad2bcec7a0192558$var$round","dataset","last","state","emojis","innerHTML","forEach","emoji","style","setProperty","ceil","sqrt","addEventListener","event","target","preventDefault","type","textContent","querySelectorAll","node","score","confirm","setTimeout","window","includes","key","card","querySelector","click"],"version":3,"file":"index.043c8d3c.js.map"}