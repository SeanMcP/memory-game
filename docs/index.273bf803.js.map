{"mappings":"SAASA,EAAQC,GACf,IAAIC,EAAM,IAAID,GACd,IAAK,IAAIE,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,KACzCD,EAAIC,GAAID,EAAIG,IAAM,CAACH,EAAIG,GAAIH,EAAIC,IAElC,OAAOD,EAGT,MAAMO,EAAS,CACb,KACG,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MCHL,MAAMC,EAASC,SAASC,eAAe,QACjCC,aAfJ,MACMC,EADM,IAAIC,gBAAgBC,SAASC,QACRC,IAAI,SAC/BC,EAAQC,SAASN,GAKvB,OAAIK,GAASA,EAAQ,GAAM,GAAKA,GAAS,GAAKA,GAAS,GAC9CA,EAEA,GAKOE,YAKTC,WACAZ,EAAOa,QAAQJ,aACfT,EAAOa,QAAQC,YACfd,EAAOa,QAAQE,MACtB,MAAMC,WDJqBP,EAAQ,IACnC,MAAMQ,EAAO3B,EAAQS,GAAQmB,MAAM,EAAGT,EAAQ,GAC9C,OAAOnB,EAAQ,IAAI2B,KAASA,ICEbE,CAAahB,GAC5B,IAAIiB,EAAY,GAChBJ,EAAOK,SAAO,CAAEC,EAAO7B,KACrB2B,GAAS,sCAXI,6BAW+C3B,OAAO6B,gBAErEtB,EAAOoB,UAAYA,EAXrBpB,EAAOuB,MAAMC,YAAY,YAAa5B,KAAK6B,KAAK7B,KAAK8B,KAAKvB,KAc1DS,IAEAZ,EAAO2B,iBAAiB,SAAUC,IAChC,MAAOC,OAACA,GAAWD,EACnB,GAA6B,WAAzB5B,EAAOa,QAAQE,OAAsBc,EAAOhB,QAAQE,MACtD,OAAOa,EAAME,iBAEf,GAA4B,SAAxBD,EAAOhB,QAAQkB,KAEjB,GADAF,EAAOhB,QAAQE,MAAQ,SACnBf,EAAOa,QAAQC,KAAM,CACvB,GAAIe,EAAOG,cAAgBhC,EAAOa,QAAQC,KAAM,CAC9Cb,SAASgC,iBAAiB,yBAAyBZ,SAASa,IAC1DA,EAAKrB,QAAQE,MAAQ,UAEvB,MAAMoB,EAAQzB,SAASV,EAAOa,QAAQJ,OAAS,GAAK,EAEpD,GADAT,EAAOa,QAAQJ,MAAQ0B,EACnBA,IAAUhC,EAAY,GACpBiC,QAAQ,mCAAgC,OAC1CxB,SAIJZ,EAAOa,QAAQE,MAAQ,SACvBsB,YAAU,KACRpC,SAASgC,iBAAiB,yBAAyBZ,SAASa,WACnDA,EAAKrB,QAAQE,SAEtBf,EAAOa,QAAQE,MAAQ,UACtB,YAEEf,EAAOa,QAAQC,UAEtBd,EAAOa,QAAQC,KAAOe,EAAOG,eAKnCM,OAAOX,iBAAiB,YAAaC,IACnC,GAtDe,6BAsDFV,MAAM,EAAGf,GAAWoC,SAASX,EAAMY,KAAM,CACpDZ,EAAME,iBACN,MAAMW,EAAOxC,SAASyC,cAAa,cAAed,EAAMY,SACxDC,GAAQA,EAAKE","sources":["src/shuffle.ts","src/main.ts"],"sourcesContent":["function shuffle(array: any[]) {\n  let arr = [...array];\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n}\n\nconst emojis = [\n  \"🐮\",\n  \"🐷\",\n  \"🐶\",\n  \"🐱\",\n  \"🦁\",\n  \"🐻\",\n  \"🐯\",\n  \"🐼\",\n  \"🐵\",\n  \"🐸\",\n  \"🐹\",\n];\n\nexport function selectEmojis(count = 16) {\n  const list = shuffle(emojis).slice(0, count / 2);\n  return shuffle([...list, ...list]);\n}\n","import { selectEmojis } from \"./shuffle\";\n\nfunction getCardCount() {\n  const usp = new URLSearchParams(location.search);\n  const param: null | string = usp.get(\"count\");\n  const count = parseInt(param);\n\n  /**\n   * Count is not NaN and is even\n   */\n  if (count && count % 2 === 0 && count >= 2 && count <= 16) {\n    return count;\n  } else {\n    return 16;\n  }\n}\n\nconst gameEl = document.getElementById(\"game\");\nconst cardCount = getCardCount();\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\ngameEl.style.setProperty(\"--columns\", Math.ceil(Math.sqrt(cardCount)));\n\nfunction round() {\n  delete gameEl.dataset.count;\n  delete gameEl.dataset.last;\n  delete gameEl.dataset.state;\n  const emojis = selectEmojis(cardCount);\n  let innerHTML = \"\";\n  emojis.forEach((emoji, i) => {\n    innerHTML += `<button data-type=\"card\" data-key=\"${alphabet[i]}\">${emoji}</button>`;\n  });\n  gameEl.innerHTML = innerHTML;\n}\n\nround();\n\ngameEl.addEventListener(\"click\", (event) => {\n  const { target } = event;\n  if (gameEl.dataset.state === \"frozen\" || target.dataset.state) {\n    return event.preventDefault();\n  }\n  if (target.dataset.type === \"card\") {\n    target.dataset.state = \"active\";\n    if (gameEl.dataset.last) {\n      if (target.textContent === gameEl.dataset.last) {\n        document.querySelectorAll(\"[data-state='active']\").forEach((node) => {\n          node.dataset.state = \"done\";\n        });\n        const score = parseInt(gameEl.dataset.count) + 1 || 1;\n        gameEl.dataset.count = score;\n        if (score === cardCount / 2) {\n          if (confirm(\"💪 Nice practicing! Play again?\")) {\n            return round();\n          }\n        }\n      } else {\n        gameEl.dataset.state = \"frozen\";\n        setTimeout(() => {\n          document.querySelectorAll(\"[data-state='active']\").forEach((node) => {\n            delete node.dataset.state;\n          });\n          gameEl.dataset.state = \"ready\";\n        }, 2000);\n      }\n      delete gameEl.dataset.last;\n    } else {\n      gameEl.dataset.last = target.textContent;\n    }\n  }\n});\n\nwindow.addEventListener(\"keypress\", (event) => {\n  if (alphabet.slice(0, cardCount).includes(event.key)) {\n    event.preventDefault();\n    const card = document.querySelector(`[data-key=\"${event.key}\"]`);\n    card && card.click();\n  }\n});\n"],"names":["$4bf81492de070e10$var$shuffle","array","arr","i","length","j","Math","floor","random","$4bf81492de070e10$var$emojis","$5ba171b4a505aeb2$var$gameEl","document","getElementById","$5ba171b4a505aeb2$var$cardCount","param","URLSearchParams","location","search","get","count","parseInt","$5ba171b4a505aeb2$var$getCardCount","$5ba171b4a505aeb2$var$round","dataset","last","state","emojis","list","slice","$4bf81492de070e10$export$61290d433ab99c5d","innerHTML","forEach","emoji","style","setProperty","ceil","sqrt","addEventListener","event","target","preventDefault","type","textContent","querySelectorAll","node","score","confirm","setTimeout","window","includes","key","card","querySelector","click"],"version":3,"file":"index.273bf803.js.map"}